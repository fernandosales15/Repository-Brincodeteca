// Coment√°rio de uma linha

/*
Esse √© um coment√°rio de m√∫ltiplas linhas
posso montar um textinho no c√≥digo para explicar algo
*/

//Essas linha de c√≥digo imprimir√° uma mensagem no console.
console.log(
  "Ol√°, Fernando! Voc√™ ser√° Associate Software Engineer na Coddy em breve! üöÄ"
); //Exemplo com ;
console.log("Fernando, voc√™ ser√° Lead Software Engineer na Coddy em breve! üöÄ"); //Exemplo sem ; (Adicionado por consist√™ncia)

//inicializando vari√°veis
let numero = 10;
console.log(numero);

numero = 100; // Reatribuindo outro valor a uma vari√°vel
console.log(numero);

let nome = "Fernando"; //String - Texto
console.log(nome);

let isDeveloperFernando = true; // Boolean - true ou false
console.log(isDeveloperFernando);

let isSpecialistFernando = false; // Boolean - true ou false
console.log(isSpecialistFernando);

let meuNomeCompleto = "Fernando"; // Uso de camelCase para nome de vari√°vel

let variavelSemNome; // Vari√°vel declarada, mas sem valor atribu√≠do. O valor padr√£o √© undefined
console.log(variavelSemNome); // Imprimir√° "undefined"

console.log(`meuNomeCompleto = ${meuNomeCompleto}`); // Uso de template string (crase) para interpolar vari√°veis em strings

const pi = 3.14; // Constante - valor fixo que n√£o pode ser reatribu√≠do
console.log(pi);

console.log("\n--- Exerc√≠cios Pr√°ticos ---");

/*
  Exerc√≠cio 1: Cart√£o de Apresenta√ß√£o
  - Crie vari√°veis para guardar seu nome, sua profiss√£o e sua cidade.
  - Crie uma constante para guardar seu ano de nascimento.
  - Use console.log e template strings para montar uma frase de apresenta√ß√£o.
  - Exemplo de sa√≠da: "Ol√°! Meu nome √© Fernando, nasci em 1990, moro em S√£o Paulo e serei um Desenvolvedor de Software."
*/

let meuNome = "Fernando";
let minhaProfissao = "Associate Software Engineer";
let minhaCidade = "S√£o Paulo";
const anoDeNascimento = 1992;

console.log("\n--- Exerc√≠cio 1: Minha Apresenta√ß√£o ---");
console.log(
  `Ol√°! Eu sou o ${meuNome}, nasci em ${anoDeNascimento}, e moro em ${minhaCidade}, atualmente sou ${minhaProfissao}`
);

/*
  Exerc√≠cio 2: Calculadora Simples
  - Crie duas vari√°veis, `valorA` e `valorB`, com n√∫meros quaisquer.
  - Realize as quatro opera√ß√µes b√°sicas: soma, subtra√ß√£o, multiplica√ß√£o e divis√£o.
  - Imprima os resultados de forma clara no console.
*/
console.log("\n--- Exerc√≠cio 2: Calculadora Simples ---");
let valorA = 20;
let valorB = 5;

console.log(`Resultados para ${valorA} e ${valorB}:`);
console.log(`Soma: ${valorA + valorB}`);
console.log(`Subtra√ß√£o: ${valorA - valorB}`);
console.log(`Multiplica√ß√£o: ${valorA * valorB}`);
console.log(`Divis√£o: ${valorA / valorB}`);

/*
  Exerc√≠cio 3: Verificador de Maioridade

  Agora, vamos criar um pequeno programa que toma uma decis√£o!

  1. Crie uma vari√°vel chamada `idadeUsuario` e atribua um n√∫mero a ela (por exemplo, 25).
  2. Crie uma constante chamada `idadeMinima` com o valor 18.
  3. Use uma estrutura condicional (if/else) para verificar se a `idadeUsuario` √© maior ou igual √† `idadeMinima`.
  4. Se for maior ou igual, imprima no console: "Acesso permitido. Voc√™ √© maior de idade."
  5. Se for menor, imprima no console: "Acesso negado. Voc√™ √© menor de idade."

  Dica: Tente mudar o valor da `idadeUsuario` para um n√∫mero menor que 18 (como 15) e rode o c√≥digo novamente para ver o resultado mudar.
*/

console.log("\n--- Exerc√≠cio 3: Verificador de Maioridade ---");

let idadeUsuario = 15;
const idadeMinima = 18;

if (idadeUsuario >= idadeMinima) {
  console.log("Acesso permitido, voc√™ √© maior de idade");
} else {
  console.log("Acesso negado. Voc√™ √© menor de idade");
}

//Atalhos aritim√©ticos
let contador = 0;

contador += 10;
console.log(contador);

contador *= 5;
console.log(contador);

contador /= 2;
console.log(contador);

contador -= 3;
console.log(contador);

//Operadores de Compara√ß√£o

let idade = 18;
let idademax = 65;
let analiseIdade = idade > idademax;
console.log(analiseIdade);

console.log("\n--- Exerc√≠cio 4: Simulador de Pontua√ß√£o de Jogo ---");
let pontuacaoUsuario = 100;
console.log(`Pontua√ß√£o inicial: ${pontuacaoUsuario}`);

pontuacaoUsuario += 75;
console.log(`Ap√≥s b√¥nus de fase (+75): ${pontuacaoUsuario}`);

pontuacaoUsuario -= 30;
console.log(`Ap√≥s penalidade (-30): ${pontuacaoUsuario}`);

// Cuidado aqui! O nome da vari√°vel √© 'pontuacaoUsuario' (com 'U' mai√∫sculo). JavaScript diferencia mai√∫sculas de min√∫sculas.
pontuacaoUsuario *= 2;
console.log(`Ap√≥s item multiplicador (x2): ${pontuacaoUsuario}`);

// O mesmo aqui, a vari√°vel correta √© 'pontuacaoUsuario'.
pontuacaoUsuario /= 2;
console.log(`Pontua√ß√£o final da rodada (/2): ${pontuacaoUsuario}`);

console.log("\n--- Exerc√≠cio 5: Verificador de Estoque e Promo√ß√£o ---");

let quantidadeEmEstoque = 50;
let pedidoMinimo = 20;
let pedidoCliente = 25;

let pedidoMaior = quantidadeEmEstoque > pedidoCliente;
console.log(
  `A quantidade em estoque √© maior que o pedido do cliente? ${pedidoMaior}`
);

let resultadoPedidoCliente = pedidoCliente >= pedidoMinimo;
console.log(
  `O pedido do cliente atende ao pedido m√≠nimo? ${resultadoPedidoCliente}`
);

// Para ver a diferen√ßa real, vamos comparar uma string com um n√∫mero.
let codigoProdutoTexto = "150";
let codigoProdutoNumero = 150; // Alterado para ser um n√∫mero, n√£o uma string.

let comparacaoSolta = codigoProdutoTexto == codigoProdutoNumero;
console.log(`Comparando "150" == 150 (igualdade solta): ${comparacaoSolta}`);

let comparacaoEstrita = codigoProdutoTexto === codigoProdutoNumero;
console.log(
  `Comparando "150" === 150 (igualdade estrita): ${comparacaoEstrita}`
);

//Igualdade estrita x Igualdade flex√≠vel
let numberTypeOne = 100;
let numberTypeTwo = "100";

let resultTypeOne = numberTypeOne == numberTypeTwo; //Converte os tipos antes de comparar
console.log(
  `Comparando 100 == "100" (igualdade solta): O resultado √© ${resultTypeOne}`
);

let resultTypeTwo = numberTypeOne === numberTypeTwo; //N√£o converte os tipos antes de comparar
console.log(
  `Comparando 100 === "100" (igualdade estrita): O resultado √© ${resultTypeTwo}`
);

console.log("\n--- Exerc√≠cio 6: Comparador de Ingressos ---");
let ingressoNaLista = 582;
let ingressoDigitado = "582"; //Resultado esperado √© True

let comparacaoIngressos = ingressoNaLista == ingressoDigitado;
console.log(
  `Comparando 582 == "582" (igualdade solta): O resultado √© ${comparacaoIngressos}`
);

let segundaComparacaoIngressos = ingressoNaLista === ingressoDigitado; //Resultado esperado √© false
console.log(
  `Comparando 582 === "582" (igualdade estrita): O resultado √©: ${segundaComparacaoIngressos}`
);

/*
  Reflex√£o e Conclus√£o:
  Para um sistema real, o operador de igualdade estrita (===) √© sempre a escolha mais segura e recomendada.
  Ele evita comportamentos inesperados causados pela convers√£o autom√°tica de tipos (coer√ß√£o),
  garantindo que a compara√ß√£o s√≥ seja verdadeira se tanto o valor quanto o tipo forem id√™nticos.
  Isso torna o c√≥digo mais previs√≠vel, mais f√°cil de depurar e menos propenso a bugs.
*/

//Desigualdade Estrita x Desigualdade Flex√≠vel
let anotherNumberTypeOne = 100;
let otherNumberTypeTwo = "200";
let anotherResult = anotherNumberTypeOne != otherNumberTypeTwo; // Resultado esperado true
console.log(
  `Comparando 100 != "200" (desigualdade flex√≠vel): O resultado √© ${anotherResult}`
);

let anotherSecondResult = anotherNumberTypeOne !== otherNumberTypeTwo; //Resultado esperado true
console.log(
  `Comparando 100 !== "200" (desigualdade estrita): O resultado √© ${anotherSecondResult}`
);

//Operadores l√≥gicos 

let CompareAndOperator = (10 < 100) && (100 < 200); //resultado esperado 'true'
console.log(`O resultado esperado √© true: Verificando ${CompareAndOperator}`);
